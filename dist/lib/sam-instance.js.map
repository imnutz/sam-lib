{"version":3,"sources":["../../lib/sam-instance.js"],"names":["intents","acceptors","reactors","naps","renderView","react","r","accept","proposal","a","mount","arr","elements","operand","model","map","e","push","present","forEach","state","reduce","or","addInitialState","initialState","Object","assign","addComponent","component","actions","action","privateModel","setRender","render","on"],"mappings":";;;;;;;;;;;;;AAcA;;AAdA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEe,oBAAW;AACtB;AACA,MAAIA,OAAJ;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,IAAI,GAAG,EAAb,CALsB,CAOtB;;AACA,MAAIC,UAAU,GAAG;AAAA,WAAM,IAAN;AAAA,GAAjB;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,CAAC;AAAA,WAAIA,CAAC,EAAL;AAAA,GAAf;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,QAAQ;AAAA,WAAI,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACD,QAAD,CAAL;AAAA,KAAL;AAAA,GAAvB;;AACA,MAAME,KAAK,GAAG,SAARA,KAAQ;AAAA,QAACC,GAAD,uEAAO,EAAP;AAAA,QAAWC,QAAX,uEAAsB,EAAtB;AAAA,QAA0BC,OAA1B,uEAAoCC,KAApC;AAAA,WAA8CF,QAAQ,CAACG,GAAT,CAAa,UAAAC,CAAC;AAAA,aAAIL,GAAG,CAACM,IAAJ,CAASD,CAAC,CAACH,OAAD,CAAV,CAAJ;AAAA,KAAd,CAA9C;AAAA,GAAd,CAXsB,CAatB;;;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMI,OAAO,GAAG,SAAVA,OAAU,CAACV,QAAD,EAAc;AAC1B;AACAP,IAAAA,SAAS,CAACkB,OAAV,CAAkBZ,MAAM,CAACC,QAAD,CAAxB,EAF0B,CAI1B;;AACAY,IAAAA,KAAK;AACR,GAND,CAhBsB,CAwBtB;;;AACA,MAAMA,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB;AACAlB,IAAAA,QAAQ,CAACiB,OAAT,CAAiBd,KAAjB,EAFgB,CAIhB;;AACA,KAACF,IAAI,CAACY,GAAL,CAASV,KAAT,EAAgBgB,MAAhB,CAAuBC,YAAvB,EAA2B,KAA3B,CAAD,IAAsClB,UAAU,CAACU,KAAD,CAAhD;AACH,GAND,CAzBsB,CAiCtB;;;AACA,MAAMS,eAAe,GAAG,SAAlBA,eAAkB;AAAA,QAACC,YAAD,uEAAgB,EAAhB;AAAA,WAAuBC,MAAM,CAACC,MAAP,CAAcZ,KAAd,EAAqBU,YAArB,CAAvB;AAAA,GAAxB,CAlCsB,CAoCtB;;;AACA,MAAMG,YAAY,GAAG,SAAfA,YAAe,GAAoB;AAAA,QAAnBC,SAAmB,uEAAP,EAAO;AACrC;AACA;AACA5B,IAAAA,OAAO,GAAG,iBAAE4B,SAAS,CAACC,OAAZ,EAAqBd,GAArB,CAAyB,UAAAe,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAmBZ,OAAnB;AAAA;AAAA,yBAAiCY,MAAM,MAAN,eAAjC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA;AAAA,KAA/B,CAAV,CAHqC,CAIrC;;AACApB,IAAAA,KAAK,CAACT,SAAD,EAAY2B,SAAS,CAAC3B,SAAtB,EAAiC2B,SAAS,CAACG,YAA3C,CAAL;AACArB,IAAAA,KAAK,CAACR,QAAD,EAAW0B,SAAS,CAAC1B,QAArB,EAA+B0B,SAAS,CAACG,YAAzC,CAAL;AACArB,IAAAA,KAAK,CAACP,IAAD,EAAOyB,SAAS,CAACzB,IAAjB,EAAuByB,SAAS,CAACG,YAAjC,CAAL;AACH,GARD;;AAUA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,MAAM,EAAI;AACxB7B,IAAAA,UAAU,GAAG6B,MAAb;AACH,GAFD,CA/CsB,CAmDtB;;;AACA,SAAO,iBAAyC;AAAA,QAAtCT,YAAsC,SAAtCA,YAAsC;AAAA,QAAxBI,SAAwB,SAAxBA,SAAwB;AAAA,QAAbK,MAAa,SAAbA,MAAa;AAC5CjC,IAAAA,OAAO,GAAG,EAAV;AAEC,sBAAGwB,YAAH,EAAmBD,eAAnB,EACAW,EADA,CACGN,SADH,EACmBD,YADnB,EAEAO,EAFA,CAEGD,MAFH,EAEmBD,SAFnB;AAID,WAAO;AACHhC,MAAAA,OAAO,EAAPA;AADG,KAAP;AAGH,GAVD;AAWH","sourcesContent":["// ISC License (ISC)\r\n// Copyright 2019 Jean-Jacques Dubray\r\n\r\n// Permission to use, copy, modify, and/or distribute this software for any purpose \r\n// with or without fee is hereby granted, provided that the above copyright notice \r\n// and this permission notice appear in all copies.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \r\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND \r\n// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, \r\n// OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA \r\n// OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, \r\n// ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n\r\nimport { A, on, or } from './sam-utils'\r\n\r\n// This is an implementation of SAM using SAM's own principles\r\n// - SAM's internal model\r\n// - SAM's internal acceptors\r\n// - SAM's present function \r\n\r\nexport default function() {\r\n    // SAM's internal model\r\n    let intents\r\n    const acceptors = []\r\n    const reactors = []\r\n    const naps = []\r\n    \r\n    // ancillary\r\n    let renderView = () => null\r\n    const react = r => r()\r\n    const accept = proposal => a => a(proposal)\r\n    const mount = (arr = [], elements = [], operand = model) => elements.map(e => arr.push(e(operand)))\r\n\r\n    // Model\r\n    const model = {}\r\n\r\n    const present = (proposal) => {\r\n        // accept proposal\r\n        acceptors.forEach(accept(proposal))\r\n\r\n        // Continue to state representation\r\n        state()\r\n    }\r\n\r\n    // State Representation\r\n    const state = () => {\r\n        // Compute state representation\r\n        reactors.forEach(react)\r\n\r\n        // render state representation (gated by nap)\r\n        !naps.map(react).reduce(or, false) && renderView(model)\r\n    }\r\n\r\n    // SAM's internal acceptors\r\n    const addInitialState = (initialState = {}) => Object.assign(model, initialState)\r\n\r\n    // add one component at a time, returns array of intents from actions\r\n    const addComponent = (component = {}) => {\r\n        // Decorate actions to present proposal to the model\r\n        // intents = A(component.actions).map(action => async (...args) => present(await action(...args)))\r\n        intents = A(component.actions).map(action => async (...args) => present(await action(...args)))\r\n        // Add component's acceptors,  reactors and naps to SAM\r\n        mount(acceptors, component.acceptors, component.privateModel)\r\n        mount(reactors, component.reactors, component.privateModel)\r\n        mount(naps, component.naps, component.privateModel)\r\n    }\r\n\r\n    const setRender = render => {\r\n        renderView = render\r\n    }\r\n\r\n    // SAM's internal present function\r\n    return ({ initialState, component, render }) => {\r\n        intents = [];\r\n\r\n         on(initialState,   addInitialState)\r\n        .on(component,      addComponent)\r\n        .on(render,         setRender)\r\n\r\n        return {\r\n            intents\r\n        }\r\n    }\r\n}\r\n"],"file":"sam-instance.js"}